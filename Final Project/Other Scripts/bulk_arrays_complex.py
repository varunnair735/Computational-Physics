"""Velocity"""
    up[1:-1, 1:-1] = (u[1:-1, 1:-1]
                        - u[1:-1, 1:-1] * dt / a
                        * (u[1:-1, 1:-1] - u[1:-1, 0:-2])
                        - v[1:-1, 1:-1] * dt / a
                        * (u[1:-1, 1:-1] - u[0:-2, 1:-1])
                        - dt / (2 * rho * a)
                        * (p[1:-1, 2:] - p[1:-1, 0:-2])
                        + nu * dt / a**2
                        * (u[1:-1, 2:] - 2 * u[1:-1, 1:-1] + u[1:-1, 0:-2]
                        + u[2:, 1:-1] - 2 * u[1:-1, 1:-1]+ u[0:-2, 1:-1])
                        + P * dt)

    vp[1:-1, 1:-1] = (v[1:-1, 1:-1]
                    - u[1:-1, 1:-1] * dt / a
                    * (v[1:-1, 1:-1] - v[1:-1, 0:-2])
                    - v[1:-1, 1:-1] * dt / a
                    * (v[1:-1, 1:-1] - v[0:-2, 1:-1])
                    - dt / (2 * rho * a)
                    * (p[2:, 1:-1] - p[0:-2, 1:-1])
                    + nu * (dt / a**2
                    * (v[1:-1, 2:] - 2 * v[1:-1, 1:-1] + v[1:-1, 0:-2])
                    + dt / a**2
                    * (v[2:, 1:-1] - 2 * v[1:-1, 1:-1] + v[0:-2, 1:-1])))

    """Velocity boundary conditions"""
    #for x = 0
    up[1:-1, 0] = (u[1:-1, 0] - u[1:-1, 0] * dt / a
                * (u[1:-1, 0] - u[1:-1, -1])
                - v[1:-1, 0] * dt / a
                * (u[1:-1, 0] - u[0:-2, 0])
                - dt / (2 * rho * a)
                * (p[1:-1, 1] - p[1:-1, -1])
                + nu * (dt / a**2
                * (u[1:-1, 1] - 2 * u[1:-1, 0] + u[1:-1, -1])
                + dt / a**2
                * (u[2:, 0] - 2 * u[1:-1, 0] + u[0:-2, 0]))
                + P * dt)

    #for x = 0
    vp[1:-1, 0] = (v[1:-1, 0] - u[1:-1, 0] * dt / a
                * (v[1:-1, 0] - v[1:-1, -1])
                - v[1:-1, 0] * dt / a
                * (v[1:-1, 0] - v[0:-2, 0])
                - dt / (2 * rho * a)
                * (p[2:, 0] - p[0:-2, 0])
                + nu * (dt / a**2
                * (v[1:-1, 1] - 2 * v[1:-1, 0] + v[1:-1, -1])
                + dt / a**2
                * (v[2:, 0] - 2 * v[1:-1, 0] + v[0:-2, 0])))

    #for x = L
    up[1:-1, -1] = (u[1:-1, -1] - u[1:-1, -1] * dt / a
                 * (u[1:-1, -1] - u[1:-1, -2])
                 - v[1:-1, -1] * dt / a
                 * (u[1:-1, -1] - u[0:-2, -1])
                 - dt / (2 * rho * a)
                 * (p[1:-1, 0] - p[1:-1, -2])
                 + nu * (dt / a**2
                 * (u[1:-1, 0] - 2 * u[1:-1,-1] + u[1:-1, -2])
                 + dt / a**2
                 * (u[2:, -1] - 2 * u[1:-1, -1] + u[0:-2, -1]))
                 + P * dt)

    #for x = L
    vp[1:-1, -1] = (v[1:-1, -1] - u[1:-1, -1] * dt / a
                 * (v[1:-1, -1] - v[1:-1, -2])
                 - v[1:-1, -1] * dt / a
                 * (v[1:-1, -1] - v[0:-2, -1])
                 - dt / (2 * rho * a)
                 * (p[2:, -1] - p[0:-2, -1])
                 + nu * (dt / a**2
                 * (v[1:-1, 0] - 2 * v[1:-1, -1] + v[1:-1, -2])
                 + dt / a**2
                 * (v[2:, -1] - 2 * v[1:-1, -1] + v[0:-2, -1])))


    #switching arrays for velocity and pressure
    u, up = up, u
    v, vp = vp, v

    t += dt #advance time step

return u, v, p
